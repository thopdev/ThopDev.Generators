namespace ThopDev.Generator.Blazor.Routes
{
    public class NavigationFactory : INavigationFactory
    {
        private const string Route = "";
        public TestRoute Test()
        {
            var route = Route + "/test";
            return new TestRoute(route);
        }
    }
    public interface INavigationFactory
    {
        public TestRoute Test();
    }
    public class TestWithIdBlaIWithWhatRoute : RoutableBase
    {
        internal TestWithIdBlaIWithWhatRoute(string route): base(route)
        {
        }
        /// <summary>
        /// Route from component: <see cref="ThopDev.Test.TestComponent" />
        /// </summary>
        /// <returns>Route based on /test/{id:int}/bla/i/{what?}</returns>
        public string ToRoute(string firstName = default, int age = default)
        {
            var queryStringCollection = System.Web.HttpUtility.ParseQueryString(string.Empty);
            if (firstName != default)
            {
                queryStringCollection.Add("FirstName", firstName.ToString(System.Globalization.CultureInfo.InvariantCulture));
            }
            if (age != default)
            {
                queryStringCollection.Add("Age", age.ToString(System.Globalization.CultureInfo.InvariantCulture));
            }
            return Route + (string.IsNullOrEmpty(queryStringCollection.ToString()) ? string.Empty : "?" + queryStringCollection.ToString());
        }
    }
    public class TestWithIdBlaIRoute : RoutingBase
    {
        internal TestWithIdBlaIRoute(string route): base(route)
        {
        }
        public TestWithIdBlaIWithWhatRoute WithWhat(string what)
        {
            var route = Route + "/" + what;
            return new TestWithIdBlaIWithWhatRoute(route);
        }
    }
    public class TestWithIdBlaRoute : RoutingBase
    {
        internal TestWithIdBlaRoute(string route): base(route)
        {
        }
        public TestWithIdBlaIRoute I()
        {
            var route = Route + "/i";
            return new TestWithIdBlaIRoute(route);
        }
    }
    public class TestWithIdRoute : RoutableBase
    {
        internal TestWithIdRoute(string route): base(route)
        {
        }
        /// <summary>
        /// Route from component: <see cref="ThopDev.Test.TestComponent" />
        /// </summary>
        /// <returns>Route based on /test/{id:int}</returns>
        public string ToRoute(string firstName = default, int age = default)
        {
            var queryStringCollection = System.Web.HttpUtility.ParseQueryString(string.Empty);
            if (firstName != default)
            {
                queryStringCollection.Add("FirstName", firstName.ToString(System.Globalization.CultureInfo.InvariantCulture));
            }
            if (age != default)
            {
                queryStringCollection.Add("Age", age.ToString(System.Globalization.CultureInfo.InvariantCulture));
            }
            return Route + (string.IsNullOrEmpty(queryStringCollection.ToString()) ? string.Empty : "?" + queryStringCollection.ToString());
        }
        public TestWithIdBlaRoute Bla()
        {
            var route = Route + "/bla";
            return new TestWithIdBlaRoute(route);
        }
    }
    public class TestRoute : RoutingBase
    {
        internal TestRoute(string route): base(route)
        {
        }
        public TestWithIdRoute WithId(int id)
        {
            var route = Route + "/" + id;
            return new TestWithIdRoute(route);
        }
    }
}
